package com.chngc.collect.controller;

import com.chngc.collect.common.BaseController;
import com.chngc.collect.common.Constants;
import com.chngc.collect.entity.CoreUser;
import com.chngc.collect.service.CoreUserService;
import com.chngc.collect.util.CheckUtils;
import com.chngc.collect.vo.CoreUserVo;
import com.chngc.core.common.ResponseResult;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/manager/core_user")
public class CoreUserController extends BaseController {
    @Autowired
    private CoreUserService coreUserService;
    @PostMapping("/save")
    public Mono<ResponseResult> save(HttpServletRequest request, HttpServletResponse response, CoreUser coreUser) {
        Map<String, String> map = new HashMap<>();
        // 校验字段是否为空
        CheckUtils.checkUserFiledError(coreUser,map);
        if(map.isEmpty()){
            CoreUser coreDb = coreUserService.getCoreUserByLoginName(coreUser.getLoginName());
            if(coreDb == null){
                String userId = (String) request.getSession().getAttribute("userId");
                coreUser.setPassword(Constants.INIT_PASSWORD);
                coreUser.setCreateTime(new Date());
                coreUser.setCreateUser(userId);
                coreUser.setUserStatus(Constants.INIT_USER_STATUS);
                coreUserService.save(coreUser);
            }else {
                map.put("01","账户已被占用，请重新输入");
            }
        }
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",map));
    }
    @PostMapping("/list")
    public Mono<ResponseResult> list(HttpServletRequest request, HttpServletResponse response) {
        List<CoreUserVo> userVoList = coreUserService.list();
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",userVoList));
    }
    @PostMapping("/saveUpdate")
    public Mono<ResponseResult> saveUpdate(HttpServletRequest request, HttpServletResponse response,CoreUser coreUser) {
        Map<String, String> map = new HashMap<>();
        String userId = (String) request.getSession().getAttribute("userId");
        // 校验字段是否为空
        CheckUtils.checkUserFiledError(coreUser,map);
        if(map.isEmpty()){
            CoreUser coreDb = coreUserService.getCoreUserByLoginName(coreUser.getLoginName());
            if(coreDb == null){
                coreUser.setModifyTime(new Date());
                coreUser.setModifyUser(userId);
                coreUserService.saveUpdate(coreUser);
            }else {
                map.put("01","账户已被占用，请重新输入");
            }
        }
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",map));
    }
    @PostMapping("/startUp")
    public Mono<ResponseResult> startUp(HttpServletRequest request, HttpServletResponse response,String userId) {
        CoreUser coreUser = new CoreUser();
        coreUser.setUserStatus("ACT");
        coreUser.setUserId(userId);
        coreUserService.saveUpdate(coreUser);
        Map<String, String> map = new HashMap<>();
        map.put("00","启用成功");
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",map));
    }
    @PostMapping("/startDown")
    public Mono<ResponseResult> startDown(HttpServletRequest request, HttpServletResponse response,String userId) {
        Map<String, String> map = new HashMap<>();
        CoreUser coreUser = new CoreUser();
        coreUser.setUserId(userId);
        coreUser.setUserStatus("STOP");
        coreUserService.saveUpdate(coreUser);
        map.put("00","停用成功");
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",map));
    }
    @PostMapping("/initPwd")
    public Mono<ResponseResult> initPwd(HttpServletRequest request, HttpServletResponse response,String userId) {
        Map<String, String> map = new HashMap<>();
        CoreUser coreUser = new CoreUser();
        coreUser.setUserId(userId);
        coreUser.setPassword(Constants.INIT_PASSWORD);
        coreUserService.saveUpdate(coreUser);
        map.put("00","重置密码成功");
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",map));
    }
}
