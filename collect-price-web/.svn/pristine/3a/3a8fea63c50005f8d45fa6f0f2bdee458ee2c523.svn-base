package com.chngc.collect.controller;

import com.chngc.collect.common.BaseController;
import com.chngc.collect.common.Constants;
import com.chngc.collect.entity.BusiDictionariesProject;
import com.chngc.collect.entity.BusiGoods;
import com.chngc.collect.service.BusiGoodsService;
import com.chngc.collect.util.Dictionaries;
import com.chngc.core.common.ResponseResult;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

@Slf4j
@RequestMapping("manager/busi_goods")
@RestController
public class BusiGoodsController  extends BaseController{
    @Autowired
    private BusiGoodsService busiGoodsService;
    /**
     *纪念币品种-查询
     */
    @PostMapping(value = "/list")
    public Mono<ResponseResult> list(HttpServletRequest request, HttpServletResponse response) {
        String projectName=htmlEscape(request.getParameter("projectName"));
        String goodsName=htmlEscape(request.getParameter("goodsName"));
        String goodsYear=htmlEscape(request.getParameter("goodsYear"));
        String goodsMaterial=htmlEscape(request.getParameter("goodsMaterial"));
        String goodsShape=htmlEscape(request.getParameter("goodsShape"));
        List<Long> projectNameList=new ArrayList<>();
        int pageNo=Integer.parseInt(request.getParameter("pageNo"));
        int pageSize=Integer.parseInt(request.getParameter("pageSize"));
        if(StringUtils.isNotBlank(projectName)) {
            for (BusiDictionariesProject busiDictionariesProject : Dictionaries.dictionaries_project) {
                if (busiDictionariesProject.getProjectName().indexOf(projectName) > 0) {
                    projectNameList.add(busiDictionariesProject.getId());
                }
            }
        }
        Map<String,Object> map=new HashMap<>();
        map.put("pageNo",pageNo);
        map.put("pageSize",pageSize);
        map.put("goodsName",goodsName);
        map.put("goodsYear",goodsYear);
        map.put("goodsMaterial",goodsMaterial);
        map.put("goodsShape",goodsShape);
        map.put("limit",(pageNo-1)*pageSize);
        map.put("projectNameList",projectNameList);
        List<BusiGoods> busiGoodsList = busiGoodsService.list(map);
        int listCount=busiGoodsService.listCount(map);
        Map<String,Object> returnMap=new HashMap<>();
        returnMap.put("dictionariesMaterial",Dictionaries.dictionaries_material);
        returnMap.put("dictionariesShape",Dictionaries.dictionaries_shape);
        returnMap.put("busiGoodsList",busiGoodsList);
        returnMap.put("listCount",listCount);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",returnMap));
    }

    /**
     * 纪念币品种-新增
     * @param request
     * @param response
     * @return
     */
    @PostMapping(value = "/add")
    public Mono<ResponseResult> add(HttpServletRequest request, HttpServletResponse response) {
        Map<String,Object> returnMap=new HashMap<>();
        //材质
        returnMap.put("dictionariesMaterial",Dictionaries.dictionaries_material);
        //形状
        returnMap.put("dictionariesShape",Dictionaries.dictionaries_shape);
        //重量
        returnMap.put("dictionariesWeight",Dictionaries.dictionaries_weight);
        //项目名称
        returnMap.put("dictionariesProject",Dictionaries.dictionaries_project);
        //年份
        returnMap.put("dictionariesYear",Dictionaries.dictionaries_year);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",returnMap));
    }
    /**
     * 纪念币品种-保存
     * @param request
     * @param response
     * @return
     */
    @PostMapping(value = "/save")
    public Mono<ResponseResult> save(HttpServletRequest request, HttpServletResponse response) {
        Map<String,Object> returnMap=new HashMap<>();
        //项目名称
        String projectName=request.getParameter("projectName");
        //品种名称
        String goodsName=request.getParameter("goodsName");
        //类型
        String goodsType=request.getParameter("goodsType");
        //币面年份
        String goodsYear=request.getParameter("goodsYear");
        //材质
        String goodsMaterial=request.getParameter("goodsMaterial");
        //重量
        String goodsWeight=request.getParameter("goodsWeight");
        //重量单位
        String goodsWeightUnit=request.getParameter("goodsWeightUnit");
        //形状
        String goodsShape=request.getParameter("goodsShape");
        //面额
        String goodsDenomination=request.getParameter("goodsDenomination");
        //最大发行量
        String maxCirculation=request.getParameter("maxCirculation");
        //实铸量
        String actualCastingQuantity=request.getParameter("actualCastingQuantity");

        BusiGoods busiGoods=new BusiGoods();
        busiGoods.setProjectId(projectName);
        busiGoods.setGoodsName(goodsName);
        busiGoods.setGoodsType(goodsType);
        busiGoods.setGoodsYear(goodsYear);
        if(StringUtils.isNotBlank(goodsMaterial)){
            busiGoods.setGoodsMaterial(Long.parseLong(goodsMaterial));
        }
        busiGoods.setGoodsWeight(goodsWeight);
        if(StringUtils.isNotBlank(goodsWeightUnit)) {
            busiGoods.setGoodsWeightUnit(Long.parseLong(goodsWeightUnit));
        }
        busiGoods.setGoodsShape(goodsShape);
        busiGoods.setGoodsDenomination(goodsDenomination);
        if(StringUtils.isNotBlank(maxCirculation)) {
            busiGoods.setMaxCirculation(Long.parseLong(maxCirculation));
        }
        if(StringUtils.isNotBlank(actualCastingQuantity)) {
            busiGoods.setActualCastingQuantity(Long.parseLong(actualCastingQuantity));
        }
        busiGoods.setCreateTime(new Date());
        int saveNum= busiGoodsService.save(busiGoods);
        System.out.println(saveNum);
        if(saveNum>0) {
            return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE, new Date().getTime() + "", returnMap));
        }else{
            return Mono.justOrEmpty(buildResult(Constants.FAIL_CODE, new Date().getTime() + "", returnMap));
        }
    }

    /**
     * 纪念币品种-纠错
     * @param request
     * @param response
     * @return
     */
    @PostMapping(value = "/update")
    public Mono<ResponseResult> update(HttpServletRequest request, HttpServletResponse response) {
        Map<String,Object> returnMap=new HashMap<>();
        String id=request.getParameter("id");
       BusiGoods busiGoods= busiGoodsService.findById(id);
        returnMap.put("busiGoods",busiGoods);
        returnMap.put("dictionariesMaterial",Dictionaries.dictionaries_material);
        returnMap.put("dictionariesShape",Dictionaries.dictionaries_shape);
        returnMap.put("dictionariesWeight",Dictionaries.dictionaries_weight);
        returnMap.put("dictionariesProject",Dictionaries.dictionaries_project);
        returnMap.put("dictionariesYear",Dictionaries.dictionaries_year);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",returnMap));
    }

    /**
     * 纪念币品种-纠错保存
     * @param request
     * @param response
     * @return
     */
    @PostMapping(value = "/saveUpdate")
    public Mono<ResponseResult> saveUpdate(HttpServletRequest request, HttpServletResponse response) {
        Map<String,Object> returnMap=new HashMap<>();
        String projectName=request.getParameter("projectName");
        String goodsName=request.getParameter("goodsName");
        String goodsType=request.getParameter("goodsType");
        String goodsYear=request.getParameter("goodsYear");
        String goodsMaterial=request.getParameter("goodsMaterial");
        String goodsWeight=request.getParameter("goodsWeight");
        String goodsWeightUnit=request.getParameter("goodsWeightUnit");
        String goodsShape=request.getParameter("goodsShape");
        String goodsDenomination=request.getParameter("goodsDenomination");
        String maxCirculation=request.getParameter("maxCirculation");
        String actualCastingQuantity=request.getParameter("actualCastingQuantity");
        String id=request.getParameter("id");

        BusiGoods busiGoods=new BusiGoods();
        busiGoods.setProjectId(projectName);
        busiGoods.setGoodsName(goodsName);
        busiGoods.setGoodsType(goodsType);
        busiGoods.setGoodsYear(goodsYear);
        if(StringUtils.isNotBlank(goodsMaterial)){
            busiGoods.setGoodsMaterial(Long.parseLong(goodsMaterial));
        }
        busiGoods.setGoodsWeight(goodsWeight);
        if(StringUtils.isNotBlank(goodsWeightUnit)) {
            busiGoods.setGoodsWeightUnit(Long.parseLong(goodsWeightUnit));
        }
        busiGoods.setGoodsShape(goodsShape);
        busiGoods.setGoodsDenomination(goodsDenomination);
        if(StringUtils.isNotBlank(maxCirculation)) {
            busiGoods.setMaxCirculation(Long.parseLong(maxCirculation));
        }
        if(StringUtils.isNotBlank(actualCastingQuantity)) {
            busiGoods.setActualCastingQuantity(Long.parseLong(actualCastingQuantity));
        }
        busiGoods.setActualCastingQuantity(Long.parseLong(id));
        busiGoods.setCreateTime(new Date());
        int saveNum= busiGoodsService.saveUpdate(busiGoods);
        System.out.println(saveNum);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",returnMap));
    }
}