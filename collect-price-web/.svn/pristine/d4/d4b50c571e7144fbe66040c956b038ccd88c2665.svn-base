package com.chngc.collect.controller;

import com.chngc.collect.common.BaseController;
import com.chngc.collect.common.Constants;
import com.chngc.collect.entity.BusiDictionariesShape;
import com.chngc.collect.service.BusiDictionariesShapeService;
import com.chngc.collect.util.Dictionaries;
import com.chngc.core.common.ResponseResult;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@RequestMapping("/manager/busi_dictionaries_shape")
@RestController
public class BusiDictionariesShapeController extends BaseController {
    @Autowired
    private BusiDictionariesShapeService busiDictionariesShapeService;

    @PostMapping(value = "/list")
    public Mono<ResponseResult> list(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> returnMap = new HashMap<>();
        returnMap.put("dictionariesShape", Dictionaries.dictionaries_shape);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE, new Date().getTime() + "", returnMap));
    }

    @PostMapping(value = "/save")
    public Mono<ResponseResult> save(HttpServletRequest request, HttpServletResponse response) {
        String value = htmlEscape(request.getParameter("value"));
        Map<String, Object> returnMap = new HashMap<>();
        long num = busiDictionariesShapeService.save(value);
        if (num > 0) {
            BusiDictionariesShape busiDictionariesShape=new BusiDictionariesShape();
            busiDictionariesShape.setId(num);
            busiDictionariesShape.setDictionariesValue(value);
            Dictionaries.dictionaries_shape.add(busiDictionariesShape);
            return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE, new Date().getTime() + "", returnMap));
        }else{
            return Mono.justOrEmpty(buildResult(Constants.FAIL_CODE, new Date().getTime() + "", returnMap));
        }
    }
}