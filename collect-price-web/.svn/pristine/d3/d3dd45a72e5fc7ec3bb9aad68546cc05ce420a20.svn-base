package com.chngc.collect.controller;

import com.chngc.collect.common.BaseController;
import com.chngc.collect.common.Constants;
import com.chngc.collect.entity.CoreUser;
import com.chngc.collect.service.CoreUserService;
import com.chngc.collect.util.CookieUtils;
import com.chngc.collect.vo.Permission;
import com.chngc.core.common.ResponseResult;
import com.chngc.core.util.EncryptUtil;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * Created by wufc on 2019/8/22.
 */
@Slf4j
@RequestMapping("/user")
@RestController
public class LoginController extends BaseController{
    @Autowired
    private CoreUserService coreUserService;
    @Autowired
    private CookieUtils cookieUtils;

    /**
     *   退出登录
     * @param request
     * @param response
     * @return
     */
    @GetMapping(value = "/logout")
    public Mono<ResponseResult> logout(HttpServletRequest request,HttpServletResponse response) {
        request.getSession().invalidate();
        Map<String, String> map = new HashMap<>();
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",map));
    }

    /**
     * 登录
     * @param loginName
     * @param password
     * @param request
     * @param response
     * @return
     */
    @GetMapping(value = "/login")
    public Mono<ResponseResult> login(@Param("loginName") String loginName, @Param("password") String password, HttpServletRequest request,
                                      HttpServletResponse response) {
        String returnUrl = request.getParameter("returnUrl");
        // 判断  登录用户名和密码
        Permission pm = coreUserService.login(loginName,password);
        // 如果登录成功
        if(Constants.LOGINOK.equals(pm.getLoginState())){
            // token 放入cookie
            String token = cookieUtils.getCookie(request, "token");
            if (StringUtils.isBlank(token)) {
                token = getUUID();
                cookieUtils.setCookie(response, "token", token, false);
            }
            // 登录信息放入session
            request.getSession().setAttribute("token",token);
            request.getSession().setAttribute("loginName",pm.getLoginName());
            request.getSession().setAttribute("realName",pm.getRealName());
            request.getSession().setAttribute("userId",pm.getUserId());
            request.getSession().setAttribute("components", pm.getComponents());
            // 请求的路径
            pm.setReturnUrl(returnUrl);
        }
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,Constants.LOGINOK_MSG,pm));
    }

    /**
     *  修改密码
     * @param request
     * @param response
     * @return
     */
    @PostMapping(value = "/modifyPwd")
    public Mono<ResponseResult> modifyPwd(HttpServletRequest request,HttpServletResponse response) {
        Permission permission =  (Permission)request.getSession().getAttribute(Permission.class.getName());
        String oldPassword =  request.getParameter("oldPassword");
        String newPassword =  request.getParameter("newPassword");
        CoreUser coreUser = coreUserService.getCoreUserByUserId(permission.getUserId());
        Map<String, String>  map = checkPassword(oldPassword,newPassword,coreUser);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE,new Date().getTime()+"",map));
    }

    /**
     * 校验密码
     * @param oldPassword
     * @param newPassword
     * @param coreUser
     * @return
     */
    private Map<String,String> checkPassword(String oldPassword, String newPassword, CoreUser coreUser) {
        Map<String, String> map = new HashMap<>();
        if(StringUtils.isBlank(oldPassword)){
            map.put("pwdCode","0001");
            return map;
        }
        if(StringUtils.isBlank(newPassword)){
            map.put("pwdCode","0002");
            return map;
        }
        oldPassword =  EncryptUtil.getMD5(oldPassword);
        if(!oldPassword.equals(coreUser.getPassword())){
            map.put("pwdCode","0003");
            return map;
        }
        newPassword = EncryptUtil.getMD5(newPassword);
        coreUser.setPassword(newPassword);
        coreUser.setModifyTime(new Date());
        coreUser.setModifyUser(coreUser.getUserId());
        coreUserService.saveUpdate(coreUser);
        map.put("pwdCode","0000");
        return map;
    }


    public String getUUID() {
        return UUID.randomUUID().toString().replace("-", "");
    }
}
