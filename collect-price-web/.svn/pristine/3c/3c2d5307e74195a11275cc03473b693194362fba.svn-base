package com.chngc.collect.controller;

import com.chngc.collect.common.BaseController;
import com.chngc.collect.common.Constants;
import com.chngc.collect.entity.BusiDictionariesProject;
import com.chngc.collect.entity.BusiGoodsPrice;
import com.chngc.collect.service.BusiGoodsPriceService;
import com.chngc.collect.util.Dictionaries;
import com.chngc.core.common.ResponseResult;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.*;

@Slf4j
    @RequestMapping("manager/busi_goods_price")
@RestController
public class BusiGoodsPriceController extends BaseController {
    @Autowired
    private BusiGoodsPriceService busiGoodsPriceService;

    @PostMapping(value = "/list")
    public Mono<ResponseResult> list(HttpServletRequest request, HttpServletResponse response) {
        int pageNo=Integer.parseInt(request.getParameter("pageNo"));
        int pageSize=Integer.parseInt(request.getParameter("pageSize"));
        String projectName=htmlEscape(request.getParameter("projectName"));
        String goodsName=htmlEscape(request.getParameter("goodsName"));
        String issueYear=htmlEscape(request.getParameter("issueYear"));
        String goodsYear=htmlEscape(request.getParameter("goodsYear"));
        String goodsPacking=htmlEscape(request.getParameter("goodsPacking"));
        String priceSource=htmlEscape(request.getParameter("priceSource"));
        String priceType=htmlEscape(request.getParameter("priceType"));
        List<Long> projectNameList=new ArrayList<>();
        if(StringUtils.isNotBlank(projectName)) {
            for (BusiDictionariesProject busiDictionariesProject : Dictionaries.dictionaries_project) {
                if (busiDictionariesProject.getProjectName().indexOf(projectName) > 0) {
                    projectNameList.add(busiDictionariesProject.getId());
                }
            }
        }
        Map<String,Object> map=new HashMap<>();
        map.put("pageNo",pageNo);
        map.put("pageSize",pageSize);
        map.put("limit",(pageNo-1)*pageSize);
        map.put("projectNameList",projectNameList);
        map.put("goodsName",goodsName);
        map.put("issueYear",issueYear);
        map.put("goodsYear",goodsYear);
        map.put("goodsPacking",goodsPacking);
        map.put("priceSource",priceSource);
        map.put("priceType",priceType);
        Map dataMap= busiGoodsPriceService.list(map);
        int listCount= busiGoodsPriceService.listCount(map);
        Map<String, Object> returnMap = new HashMap<>();
        returnMap.put("dictionariesYear",Dictionaries.dictionaries_year);
        returnMap.put("dictionariesYear",Dictionaries.dictionaries_price_source);
        returnMap.put("dictionariesYear",Dictionaries.dictionaries_price_type);
        returnMap.put("dictionariesYear",Dictionaries.dictionaries_packing);
        returnMap.put("list",dataMap);
        returnMap.put("listCount",listCount);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE, new Date().getTime() + "", returnMap));
    }

    @PostMapping(value = "/listByGoodsId")
    public Mono<ResponseResult> listByGoodsId(HttpServletRequest request, HttpServletResponse response) {
        int pageNo=Integer.parseInt(request.getParameter("pageNo"));
        int pageSize=Integer.parseInt(request.getParameter("pageSize"));
        String goodsId=htmlEscape(request.getParameter("goodsId"));
        Map<String,Object> map=new HashMap<>();
        map.put("pageNo",pageNo);
        map.put("limit",(pageNo-1)*pageSize);
        map.put("goodsId",goodsId);
       Map list= busiGoodsPriceService.list(map);
        int listCount= busiGoodsPriceService.listCount(map);
        Map<String, Object> returnMap = new HashMap<>();
        returnMap.put("list",list);
        returnMap.put("listCount",listCount);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE, new Date().getTime() + "", returnMap));
    }

    @PostMapping(value = "/add")
    public Mono<ResponseResult> add(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> returnMap = new HashMap<>();
        returnMap.put("dictionariesPacking", Dictionaries.dictionaries_packing);
        returnMap.put("dictionariesCertificationAuthority", Dictionaries.dictionaries_certification_authority);
        returnMap.put("dictionariesRatingAgencies", Dictionaries.dictionaries_rating_agencies);
        returnMap.put("dictionariesPriceType", Dictionaries.dictionaries_price_type);
        returnMap.put("dictionariesPriceSource", Dictionaries.dictionaries_price_source);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE, new Date().getTime() + "", returnMap));
    }

    @PostMapping(value = "/save")
    public Mono<ResponseResult> save(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> returnMap = new HashMap<>();
        String dictionariesPacking = request.getParameter("dictionariesPacking");
        String dictionariesCertificationAuthority = request.getParameter("dictionariesCertificationAuthority");
        String dictionariesRatingAgencies = request.getParameter("dictionariesRatingAgencies");
        String dictionariesPriceType = request.getParameter("dictionariesPriceType");
        String dictionariesPriceSource = request.getParameter("dictionariesPriceSource");
        String businessTime = request.getParameter("businessTime");
        String ratingFraction = request.getParameter("ratingFraction");
        String quantity = request.getParameter("quantity");
        String priceSource = request.getParameter("priceSource");
        String remarks = request.getParameter("remarks");
        String goodsId = request.getParameter("goodsId");
        String userId = (String) request.getSession().getAttribute("userId");
        BusiGoodsPrice busiGoodsPrice = new BusiGoodsPrice();
        if (StringUtils.isNotBlank(businessTime)) {
            busiGoodsPrice.setBusinessTime(new Date(businessTime));
        }
        busiGoodsPrice.setRatingFraction(ratingFraction);
        if (StringUtils.isNotBlank(quantity)) {
            busiGoodsPrice.setQuantity(Long.parseLong(quantity));
        }
        if (StringUtils.isNotBlank(priceSource)) {
            busiGoodsPrice.setPriceSource(Long.parseLong(priceSource));
        }
        busiGoodsPrice.setRemarks(remarks);
        if (StringUtils.isNotBlank(dictionariesPacking)) {
            busiGoodsPrice.setGoodsPacking(Long.parseLong(dictionariesPacking));
        }
        if (StringUtils.isNotBlank(dictionariesCertificationAuthority)) {
            busiGoodsPrice.setCertificationAuthority(Long.parseLong(dictionariesCertificationAuthority));
        }
        if (StringUtils.isNotBlank(dictionariesRatingAgencies)) {
            busiGoodsPrice.setRatingAgencies(Long.parseLong(dictionariesRatingAgencies));
        }
        if (StringUtils.isNotBlank(dictionariesPriceType)) {
            busiGoodsPrice.setPriceType(Long.parseLong(dictionariesPriceType));
        }
        if (StringUtils.isNotBlank(dictionariesPriceSource)) {
            busiGoodsPrice.setPriceSource(Long.parseLong(dictionariesPriceSource));
        }
        if (StringUtils.isNotBlank(goodsId)) {
            busiGoodsPrice.setGoodsId(Long.parseLong(goodsId));
        }
        busiGoodsPrice.setCreateUser(userId);
        int num = busiGoodsPriceService.save(busiGoodsPrice);
        if (num > 0) {
            return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE, new Date().getTime() + "", returnMap));
        } else {
            return Mono.justOrEmpty(buildResult(Constants.FAIL_CODE, new Date().getTime() + "", returnMap));
        }
    }

    @PostMapping(value = "/update")
    public Mono<ResponseResult> update(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> returnMap = new HashMap<>();
        String id = request.getParameter("id");
        returnMap.put("dictionariesPacking", Dictionaries.dictionaries_packing);
        returnMap.put("dictionariesCertificationAuthority", Dictionaries.dictionaries_certification_authority);
        returnMap.put("dictionariesRatingAgencies", Dictionaries.dictionaries_rating_agencies);
        returnMap.put("dictionariesPriceType", Dictionaries.dictionaries_price_type);
        returnMap.put("dictionariesPriceSource", Dictionaries.dictionaries_price_source);
        BusiGoodsPrice busiGoodsPrice = busiGoodsPriceService.findById(id);
        returnMap.put("busiGoodsPrice", busiGoodsPrice);
        return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE, new Date().getTime() + "", returnMap));
    }
    @PostMapping(value = "/saveUpdate")
    public Mono<ResponseResult> saveUpdate(HttpServletRequest request, HttpServletResponse response) {
        Map<String, Object> returnMap = new HashMap<>();
        String dictionariesPacking = request.getParameter("dictionariesPacking");
        String dictionariesCertificationAuthority = request.getParameter("dictionariesCertificationAuthority");
        String dictionariesRatingAgencies = request.getParameter("dictionariesRatingAgencies");
        String dictionariesPriceType = request.getParameter("dictionariesPriceType");
        String dictionariesPriceSource = request.getParameter("dictionariesPriceSource");
        String businessTime = request.getParameter("businessTime");
        String ratingFraction = request.getParameter("ratingFraction");
        String quantity = request.getParameter("quantity");
        String priceSource = request.getParameter("priceSource");
        String remarks = request.getParameter("remarks");
        String goodsId = request.getParameter("goodsId");
        String id = request.getParameter("id");
        String userId = (String) request.getSession().getAttribute("userId");
        BusiGoodsPrice busiGoodsPrice = new BusiGoodsPrice();
        if (StringUtils.isNotBlank(businessTime)) {
            busiGoodsPrice.setBusinessTime(new Date(businessTime));
        }
        busiGoodsPrice.setRatingFraction(ratingFraction);
        if (StringUtils.isNotBlank(quantity)) {
            busiGoodsPrice.setQuantity(Long.parseLong(quantity));
        }
        if (StringUtils.isNotBlank(priceSource)) {
            busiGoodsPrice.setPriceSource(Long.parseLong(priceSource));
        }
        busiGoodsPrice.setRemarks(remarks);
        if (StringUtils.isNotBlank(dictionariesPacking)) {
            busiGoodsPrice.setGoodsPacking(Long.parseLong(dictionariesPacking));
        }
        if (StringUtils.isNotBlank(dictionariesCertificationAuthority)) {
            busiGoodsPrice.setCertificationAuthority(Long.parseLong(dictionariesCertificationAuthority));
        }
        if (StringUtils.isNotBlank(dictionariesRatingAgencies)) {
            busiGoodsPrice.setRatingAgencies(Long.parseLong(dictionariesRatingAgencies));
        }
        if (StringUtils.isNotBlank(dictionariesPriceType)) {
            busiGoodsPrice.setPriceType(Long.parseLong(dictionariesPriceType));
        }
        if (StringUtils.isNotBlank(dictionariesPriceSource)) {
            busiGoodsPrice.setPriceSource(Long.parseLong(dictionariesPriceSource));
        }
        if (StringUtils.isNotBlank(goodsId)) {
            busiGoodsPrice.setGoodsId(Long.parseLong(goodsId));
        }
        busiGoodsPrice.setId(Long.parseLong(id));
        busiGoodsPrice.setEditUser(userId);
        int num = busiGoodsPriceService.saveUpdate(busiGoodsPrice);
        if (num > 0) {
            return Mono.justOrEmpty(buildResult(Constants.SUCCESS_CODE, new Date().getTime() + "", returnMap));
        } else {
            return Mono.justOrEmpty(buildResult(Constants.FAIL_CODE, new Date().getTime() + "", returnMap));
        }
    }
}